apiVersion: v1 
kind: Namespace 
metadata: 
    name: stark-challenge
--- 
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: stark-challenge
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: stark-challenge
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 60
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stark-challenge
  namespace: stark-challenge
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: stark-challenge
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: stark-challenge
        io.kompose.service: stark-challenge
    spec:
      containers:
      - env:
        - name: ASPNETCORE_ENVIRONMENT
          value: dev
        - name: DD_ENV
          value: dev
        - name: DD_VERSION
          value: BUILD_VERSION
        - name: DD_SERVICE
          value: stark-challenge
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        image: ImageName
        imagePullPolicy: Always
        resources:
          requests:
            memory: "300Mi"
            cpu: "250m"
          limits:
            memory: "500Mi"
            cpu: "500m"
        name: stark-challenge        
        securityContext:
          procMount: Default
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 60
status:
  availableReplicas: 1
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    field.cattle.io/targetWorkloadIds: '["deployment:stark-challenge:stark-challenge"]'    
  name: stark-challenge-service
spec:
  ports:
  - name: port-80
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    io.kompose.service: stark-challenge
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
  name: stark-challenge-ingress
spec:
  rules:
  # atencao aqui
  - host: stark-challenge.dev.fts-eks.container.btgpactual.net
    http:
      paths:
      - backend:
          service:
            name: stark-challenge-service
            port:
              number: 80
        path: /
        pathType: Prefix
status:
  loadBalancer: {}





